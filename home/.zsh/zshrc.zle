# zle の設定
# man zshzle を確認すること

# コマンドライン編集機能を有効化
bindkey -v

# viins モードで emacs キーバインドを使う
bindkey -M viins "^P" up-line-or-history #history-beginning-search-backward-end
bindkey -M viins "^N" down-line-or-history #history-beginning-search-forward-end
bindkey -M viins "^F" forward-char
bindkey -M viins "^B" backward-char
bindkey -M viins "^R" history-incremental-search-backward
bindkey -M viins "^S" history-incremental-search-forward
bindkey -M viins "^A" beginning-of-line
bindkey -M viins "^E" end-of-line
bindkey -M viins "^K" kill-line
bindkey -M viins "^D" delete-char

# # # Set umask
# # umask 077
#
# # PROMPT
#
# # Display git condition
# zstyle ':vcs_info:*' formats '(%s)-[%b]'
# zstyle ':vcs_info:*' actionformats '(%s)-[%b|%a]'
# # function precmd() {
# #     psvar=()
# #     LANG=ja_JP.UTF-8 vcs_info
# #     [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
# # }

# [Zsh Module の読み込み]
#   man 1 zshmodules

# color - ${fg[colorname]}...${reset_color} で色指定する
autoload -Uz colors && colors
autoload -Uz add-zsh-hook
# 設定に terminfo を使う
# ターミナルがサポートしている機能を確認: infocmp
# 機能の名前の確認: man terminfo
# 詳しくは https://wiki.archlinux.org/index.php/Bash/Prompt_customization
autoload -Uz terminfo
# Gitのブランチを表示するために vcs_info をロード
autoload -Uz vcs_info

# vcs_info_msg_0_変数をどのように表示するかフォーマットの指定
# デフォルトのフォーマット
# %s: どのバージョン管理システムを使っているか（git, svnなど）
# %b: ブランチ名
zstyle ':vcs_info:*' formats '(%s)[%b] '
# 特別な状態（mergeでコンフリクトしたときなど）でのフォーマット
# %a: アクション名（merge, rebaseなど）
zstyle ':vcs_info:*' actionformats '(%s)[%b|%a] '
# プロンプトが表示されるごとに情報を取得
precmd () { vcs_info }

# Enterキーを押してコマンドを実行する前に left_down_prompt_preexec を実行して
# PROMPT_2 の行を削除する
left_down_prompt_preexec() {
    print -rn -- $terminfo[el]
}
add-zsh-hook preexec left_down_prompt_preexec

# [特殊ウィジェットの定義]


# ウィジェット関数の定義
# man zshzle
function zle-keymap-select zle-line-init zle-line-finish
{
    case $KEYMAP in
        main|viins)
            PROMPT_2="$fg[cyan]-- INSERT --$reset_color"
            ;;
        vicmd)
            PROMPT_2="$fg[white]-- NORMAL --$reset_color"
            ;;
        vivis|vivli)
            PROMPT_2="$fg[yellow]-- VISUAL --$reset_color"
            ;;
    esac

    # カーソルの一行下に書き込みスペースを確保する
    # cud1 してから cuu1 すると一見意味がなさそうだが、
    # これをしないとカーソルがターミナルの最下部にあるときに
    # PROMPT_2 が表示されなくなる。
    # - cud1 -> down one line home cursor
    # - cuu1 -> up one line home cursor
    # - sc -> save current cursor position
    terminfo_down_sc=$terminfo[cud1]$terminfo[cuu1]$terminfo[sc]$terminfo[cud1]

    # rc -> restore cursor position
    PROMPT="%B%(?.%{${fg[cyan]}%}.%{${fg[red]}%})%n%{$fg[white]%}@%m %U%d%u %{$fg[green]%}${vcs_info_msg_0_}%{$fg[magenta]%}%*%{$reset_color%}%b
%{$terminfo_down_sc$PROMPT_2$terminfo[rc]%}%{$fg[cyan]%}%B$%b%{$reset_color%} "
    zle reset-prompt
}

# 右プロンプトに時刻を表示する
#RPROMPT="%*"

# ウィジェットの登録
zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select


# Pecoによる過去コマンドの検索
function peco-select-history() {
  BUFFER=$(\history -n -r 1 | peco --prompt "History Search >" | perl -wlp -e 's/\\n/\n/g')
  CURSOR=$#BUFFER
  zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history
 

# Pecoによる現在のディレクトリからの移動
function peco-find-directory() {
    search_root=`pwd`
    file_path="$(find ${search_root} -maxdepth 5 | peco --prompt 'Directory Search >')"
    BUFFER="${BUFFER} ${file_path}"
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-find-directory
# bind keys
bindkey '^u' peco-find-directory
